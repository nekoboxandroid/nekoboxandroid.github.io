<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://nekoboxandroid.github.io/news/article-28898.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900" rel="stylesheet">
    <title>【java】兴唐第二十一节（LinkedList和泛型）</title>
        <meta name="description" content="LinkedList知识点 1、实现了Iterable接口的类具有迭代功能。 2、List接口为Collection的子类，表示线形数据列表，其实现类有：ArrayList(数组线性表)与Linked" />
        <link rel="icon" href="/assets/website/img/nekoboxandroid/favicon.ico" type="image/x-icon"/>
    <!-- Additional CSS Files -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/nekoboxandroid/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/nekoboxandroid/font-awesome.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/nekoboxandroid/templatemo-art-factory.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/nekoboxandroid/owl-carousel.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-N7680DZ2M0"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-N7680DZ2M0');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ***** Preloader Start ***** -->
    <div id="preloader">
        <div class="jumper">
            <div></div>
            <div></div>
            <div></div>
        </div>
    </div>
    <!-- ***** Preloader End ***** -->
    <!-- ***** Header Area Start ***** -->
    <header class="header-area header-sticky">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <nav class="main-nav">
                                                <a href="/" class="logo"><span>Nekobox Android</span></a>
                                                
                        <!-- ***** Menu Start ***** -->
                        <ul class="nav">
                                                        <li><a href="/">首页</a></li>
                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                        <li><a href="/news/">新闻资讯</a></li>
                                                        <li><a href="#">关于</a></li>
                            <li><a href="#">联系</a></li>
                        </ul>
                        <a class='menu-trigger'>
                            <span>Menu</span>
                        </a>
                        <!-- ***** Menu End ***** -->
                    </nav>
                </div>
            </div>
        </div>
    </header>
    <!-- ***** Header Area End ***** -->
    <!-- ***** Welcome Area Start ***** -->
    <div class="welcome-area list" id="welcome">
        <!-- ***** Header Text Start ***** -->
        <div class="header-text">
            <div class="container">
                <div class="row">
                    <div class="left-text col-lg-6 col-md-6 col-sm-12 col-xs-12" data-scroll-reveal="enter left move 30px over 0.6s after 0.4s">
                        <h1>【java】兴唐第二十一节（LinkedList和泛型）</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12" data-scroll-reveal="enter right move 30px over 0.6s after 0.4s">
                        <img href="/assets/website/img/nekoboxandroid/slider-icon.png" class="rounded img-fluid d-block mx-auto" alt="First Vector Graphic">
                    </div>
                </div>
            </div>
        </div>
        <!-- ***** Header Text End ***** -->
    </div>
    <!-- ***** Welcome Area End ***** -->
    <!-- ***** Features Big Item Start ***** -->
    <section class="section" id="about">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="NekoBoxNode官网节点站" data-url="https://nekoboxnode.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p><font size="3" color="black"></font><br /><font size="5" color="black">LinkedList知识点</font><br /> 1、实现了Iterable接口的类具有迭代功能。<br /> 2、List接口为Collection的子类，表示线形数据列表，其实现类有：ArrayList(数组线性表)与LinkedList(链表)<br /><font size="3" color="green">算了不多说了，上图吧</font><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/2326f80e034cf968a654fb4d9436a19c.jpg" alt="【java】兴唐第二十一节（LinkedList和泛型）"></p> <p>3、ArrayList是一个可变数组（当存储数据长度大于当前数组长度时，会重新声明一个数组，将原来的数据拷贝过来。）</p> <p>4、LinkedList的第一个元素的Pre值一定为nell ,可以用来判断是不是第一个元素</p> <p>5、ArrayList元素地址是连续的，LinkedList的地址不连续。</p> <p>6、ArrayList是数组的线性的数据结构，使用连续的内存单元存储数据元素，对元素的遍历速度比较快LinkedList在遍历集合元素方面比较慢，因为需要寻找下一个元素的地址。<br /> LinkedList是双向链表数据结构，前一个元素储存了后一个元素的地址，后一个元素记录了前一个元素的地址。当添加过删除元素时比较快。因为ArrayList需要移动删除或添加元素后的所有元素。</p> <p><font size="3" color="green">7、留下的疑问：什么是线程安全？等到讲完多线程后再来做补充，使用多线程的目的是为了使程序跑的更快一点</font></p> <p>7、Linkedlist删除元素时直接将要删除元素的前一个元素的next指向要删除元素后一个元的pre即可。</p> <p>8、向指定位置添加元素<br /> 代码实现</p> <pre><code class="prism language-java">stus<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"孙悟空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <p>9、迭代器的使用<br /> （1）如果只是打印的话则不需要将数据转为字符串的形式<br /> 代码实现：</p> <pre><code class="prism language-java">Iterator iter <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token keyword">while</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====&gt;"</span> <span class="token operator">+</span> iter<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> </code></pre> <p>(2)如果想对数据进行处理，则需要将数据转化为String类型，有两种方法<br /> 方法一：<br /> 代码实现：</p> <pre><code class="prism language-java">Iterator iter <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token keyword">while</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			String n <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====&gt;"</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>	 		<span class="token punctuation">}</span> </code></pre> <p>方法二：<br /> 代码实现：</p> <pre><code class="prism language-java">Iterator iter <span class="token operator">=</span> stus<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token keyword">while</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			String n <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span> 			System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====&gt;"</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> </code></pre> <p><font size="3" color="red">注：任何的对象和字符串拼接都会变成字符串</font></p> <p>10、LinkedList新增的方法<br /> LinkedList除了实现List提供的抽象方法外，还增加了一些方法：</p> <ol> <li>void addFirst(Object o) 将指定数据元素插入此集合的开头,原来元素（如果有）后移；</li> <li>void addLast(Object o) 将指定数据元素插入此集合的结尾</li> <li>Object getFirst() 返回此集合的第一个数据元素</li> <li>Object getLast() 返回此集合的最后一个数据元素</li> <li>Object removeFirst() 移除并返回集合表的第一个数据元素</li> <li>Object removeLast() 移除并返回集合表的最后一个数据元素<br /><font size="3" color="red">新增的六个方法都要记住</font> </li> </ol> <p><font size="5" color="black">泛型</font><br /> 1、实例化对象时的用法<br /> 代码实现：</p> <pre><code class="prism language-java">List<span class="token generics function"><span class="token punctuation">&lt;</span>Student<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics function"><span class="token punctuation">&lt;</span>Student<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	 </code></pre> <p>2、引用类型<br /> 例：</p> <pre><code class="prism language-java">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span> stu<span class="token punctuation">.</span><span class="token function">setStuNo</span><span class="token punctuation">(</span><span class="token string">"2019"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <p>由于add的两个stu地址相同，所以打印时输出的内容是一样的。</p> <p><font size="5" color="black">LinkedList的源码分析</font></p> <p>1、</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics function"><span class="token punctuation">&lt;</span>E<span class="token punctuation">&gt;</span></span>  </code></pre> <p>E指的是元素，表示ArrayList盛放元素的类型</p> <p>2、最后一个元素如果为null则说明该集合是空的。</p> <p><font size="3" color="green">小作业：将LinkFirst和LinkList自己写一下</font></p> <p><font size="5" color="black">ArrayList的源码分析</font><br /><font size="3" color="black"></font><br /> 1、其中有一个有参的构造方法</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> </code></pre> <p>很重要！因为它可以在实例化ArrayList时指定默认的长度。（无参的构造方法初始化一个长度为10的数组（默认值为10）数组）<br /> 避免一些不必要的空间扩容和元素复制。</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> c<span class="token punctuation">)</span> </code></pre> <p>2、以上代码 中？部分表示的是表示的输入的类型必须为ArrrayList的类或其子类，作用是将集合中的元素添加到新new的ArrayList当中。<br /><font size="3" color="green">3、疑问：这一步干什么用的？</font><br /> if (elementData.getClass() != Object[].class)</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-28436.htm">动物疫苗审批流程是什么意思（动物疫苗经营许可证怎么申请）</a></p>
                                        <p>下一个：<a href="/news/article-28899.htm">动物打疫苗打几次最好（动物打防疫针多少钱）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-10-20-nekobox-node-github.htm" title="10月20日 | Nekobox Android每天更新20.6M/S免费节点订阅链接">10月20日 | Nekobox Android每天更新20.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-11-free-nekobox-node.htm" title="9月11日 | Nekobox Android每天更新22.6M/S免费节点订阅链接">9月11日 | Nekobox Android每天更新22.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-12-free-subscribe-node.htm" title="11月12日 | Nekobox Android每天更新19.6M/S免费节点订阅链接">11月12日 | Nekobox Android每天更新19.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-17-free-nekobox-node.htm" title="8月17日 | Nekobox Android每天更新18.5M/S免费节点订阅链接">8月17日 | Nekobox Android每天更新18.5M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-18-nekobox-node-windows.htm" title="12月18日 | Nekobox Android每天更新23M/S免费节点订阅链接">12月18日 | Nekobox Android每天更新23M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-10-free-node-subscribe.htm" title="11月10日 | Nekobox Android每天更新19.6M/S免费节点订阅链接">11月10日 | Nekobox Android每天更新19.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-14-nekobox-node-share.htm" title="11月14日 | Nekobox Android每天更新20.7M/S免费节点订阅链接">11月14日 | Nekobox Android每天更新20.7M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-23-nekobox-github.htm" title="9月23日 | Nekobox Android每天更新21.3M/S免费节点订阅链接">9月23日 | Nekobox Android每天更新21.3M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-18-nekobox-node.htm" title="11月18日 | Nekobox Android每天更新18.5M/S免费节点订阅链接">11月18日 | Nekobox Android每天更新18.5M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-26-free-nekobox-node.htm" title="8月26日 | Nekobox Android每天更新19.3M/S免费节点订阅链接">8月26日 | Nekobox Android每天更新19.3M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">69</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">28</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="hr"></div>
                </div>
            </div>
        </div>
    </section>
    <!-- ***** Features Big Item End ***** -->
        <!-- ***** Footer Start ***** -->
    <footer>
        <div class="container">
            <div class="row">
                <div class="col-lg-7 col-md-12 col-sm-12">
                    <p class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        Nekobox Android免费节点分享站 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-lg-5 col-md-12 col-sm-12">
                    <ul class="social">
                        <li><a href="#"><i class="fa fa-facebook"></i></a></li>
                        <li><a href="#"><i class="fa fa-twitter"></i></a></li>
                        <li><a href="#"><i class="fa fa-linkedin"></i></a></li>
                        <li><a href="#"><i class="fa fa-rss"></i></a></li>
                        <li><a href="#"><i class="fa fa-dribbble"></i></a></li>
                    </ul>
                </div>
            </div>
        </div>
    </footer>
    <!-- jQuery -->
    <script src="/assets/website/js/frontend/nekoboxandroid/jquery-2.1.0.min.js"></script>
    <!-- Bootstrap -->
    <script src="/assets/website/js/frontend/nekoboxandroid/popper.js"></script>
    <script src="/assets/website/js/frontend/nekoboxandroid/bootstrap.min.js"></script>
    <!-- Plugins -->
    <script src="/assets/website/js/frontend/nekoboxandroid/owl-carousel.js"></script>
    <script src="/assets/website/js/frontend/nekoboxandroid/scrollreveal.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxandroid/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxandroid/jquery.counterup.min.js"></script>
    <script src="/assets/website/js/frontend/nekoboxandroid/imgfix.min.js"></script>
    <!-- Global Init -->
    <script src="/assets/website/js/frontend/nekoboxandroid/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>